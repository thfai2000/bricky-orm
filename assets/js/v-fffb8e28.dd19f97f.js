"use strict";(self.webpackChunktaichi_orm=self.webpackChunktaichi_orm||[]).push([[807],{9570:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-fffb8e28",path:"/guide/",title:"Introduction",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"ComputeProperty",slug:"computeproperty",children:[]},{level:2,title:"Why TaiChi?",slug:"why-taichi",children:[{level:3,title:"Retrieve relations by single SQL statement",slug:"retrieve-relations-by-single-sql-statement",children:[]},{level:3,title:"Better control on relation records",slug:"better-control-on-relation-records",children:[]},{level:3,title:"More Adaptive on changes of the business Requirements",slug:"more-adaptive-on-changes-of-the-business-requirements",children:[]}]}],filePathRelative:"guide/README.md",git:{updatedTime:1638720602e3,contributors:[{name:"Eddie Tang",email:"thfai2000@gmail.com",commits:6},{name:"Eddie Tang",email:"eddie.tang@scmp.com",commits:1}]}}},3606:(n,s,a)=>{a.r(s),a.d(s,{default:()=>p});const e=(0,a(6252).uE)('<h1 id="introduction" tabindex="-1"><a class="header-anchor" href="#introduction" aria-hidden="true">#</a> Introduction</h1><p>A new way to deal with your Data Logic of SQL Databse. You can define a virtual field called <code>ComputeProperty</code> (that actually is SQL statement) for a data model.</p><ul><li>The common data logics in form of <code>ComputeProperty</code> of Data Model become more reusable.</li><li>The codes of data query become more human readable because complex data logics can be abstracted in <code>ComputeProperty</code>.</li><li>Simlple but flexible Model API. Without using <code>QueryBuilder</code>, <code>Model API</code> is powerful enough to build complex logics by extending or modifying the <code>ComputeProperty</code>.</li><li>Developed in <strong>Typescript</strong> but you can use it without typescript compiler.</li><li>Common relation logics such as <code>HasMany</code> and <code>belongsTo</code> are can be defined in form of <code>ComputeProperty</code>. And the related Models are queried in one single Sql call.</li></ul><p>In below sections, We will explain the ORM stuff using E-commerce-like database as an example.</p><h2 id="computeproperty" tabindex="-1"><a class="header-anchor" href="#computeproperty" aria-hidden="true">#</a> ComputeProperty</h2><p>Imagine an E-commerce system. A product (Model) has various fields like <code>availableStart</code>, <code>availableEnd</code> and <code>remainingStock</code>. See below code.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Product</span> <span class="token keyword">extends</span> <span class="token class-name">Model</span> <span class="token punctuation">{</span>\n\n    <span class="token comment">//define field properties here</span>\n    id <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span>PrimaryKeyType<span class="token punctuation">)</span>\n    availableStart <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span>DateNotNullType<span class="token punctuation">)</span>\n    availableEnd <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span>DateNotNullType<span class="token punctuation">)</span>\n    remainingStock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span>NumberNotNullType<span class="token punctuation">)</span>\n\n    <span class="token comment">//define ComputeProperty based on the value of FieldProperty</span>\n    isActive <span class="token operator">=</span> Product<span class="token punctuation">.</span><span class="token function">compute</span><span class="token punctuation">(</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Scalar<span class="token operator">&lt;</span>BooleanNotNull<span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token operator">&gt;</span></span><span class="token punctuation">(</span>context <span class="token operator">=&gt;</span> context<span class="token punctuation">.</span>$<span class="token punctuation">.</span><span class="token function">And</span><span class="token punctuation">(</span>\n            parent<span class="token punctuation">.</span>$<span class="token punctuation">.</span>availableStart<span class="token punctuation">.</span><span class="token function">lessThan</span><span class="token punctuation">(</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>\n            parent<span class="token punctuation">.</span>$<span class="token punctuation">.</span>availableEnd<span class="token punctuation">.</span><span class="token function">greaterThan</span><span class="token punctuation">(</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>\n            parent<span class="token punctuation">.</span>$<span class="token punctuation">.</span>remainingStock<span class="token punctuation">.</span><span class="token function">greaterThan</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>\n        <span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>We define the schema with a <code>isActive</code> ComputeProperty which combines the values of other <code>FieldProperty</code>. It means a product is active when the current time are within these dates and the remainingStock are not zero.</p><p>That <code>ComputeProperty</code> consists of <code>ComputeFunction</code> that defines how to make a SQL value (we called <code>Scalar</code>). The variable <code>parent</code> represents the Datasource of <code>Product</code> Model. The <code>FieldProperty</code> can be accessible through the <code>parent</code> variables.</p><p>After the schema is defined, we can query the records like this:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> activeProducts <span class="token operator">=</span> <span class="token keyword">await</span> Product<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  where<span class="token operator">:</span> <span class="token punctuation">{</span>\n    isActive<span class="token operator">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>Above is the <code>ModelRepository.find()</code> function that accepts one argument <code>FindOptions</code> (Just like the other ORM). The <code>where</code> part specifies the data filtering condition. You can use the <code>isActive</code> ComputeProperty simply just like a normal field in the <code>where</code> object.</p><p>Besides, <code>ComputeFunction</code> can accept argument. Below variable <code>spare</code> is the argument. The argument of <code>ComputeFunction</code> must be optional.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Product</span> <span class="token keyword">extends</span> <span class="token class-name">Model</span> <span class="token punctuation">{</span>\n  \n  <span class="token comment">// &#39;Enough&#39; means at least certain amount of stock</span>\n  hasEnoughStock <span class="token operator">=</span> Product<span class="token punctuation">.</span><span class="token function">compute</span><span class="token punctuation">(</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> spare<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span>\n  <span class="token operator">:</span> CFReturn<span class="token operator">&lt;</span><span class="token builtin">boolean</span><span class="token operator">&gt;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> parent<span class="token punctuation">.</span>remainingStock<span class="token punctuation">.</span><span class="token function">greaterThan</span><span class="token punctuation">(</span>spare<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>Then you can use the <code>ComputeFunction</code> with passing an argument:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">//use ComputeFunction argument</span>\n<span class="token keyword">const</span> products <span class="token operator">=</span> <span class="token keyword">await</span> Product<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token function-variable function">where</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>root<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> root<span class="token punctuation">.</span><span class="token function">hasEnoughStock</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment">//at least 5 remainings</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Or use it like a normal field:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> products <span class="token operator">=</span> <span class="token keyword">await</span> Product<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  where<span class="token operator">:</span> <span class="token punctuation">{</span>\n    hasEnoughStock<span class="token operator">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>If you use it as object Key, the argument of that <code>ComputeFunction</code> will be given as undefined.</p></div><h2 id="why-taichi" tabindex="-1"><a class="header-anchor" href="#why-taichi" aria-hidden="true">#</a> Why TaiChi?</h2><h3 id="retrieve-relations-by-single-sql-statement" tabindex="-1"><a class="header-anchor" href="#retrieve-relations-by-single-sql-statement" aria-hidden="true">#</a> Retrieve relations by single SQL statement</h3><p>For some traditional ORM, querying the relation data of Model is not efficient. If the data query consist of multiple Entity, it executes SQL SELECT statement one by one. Usually, it produce several SQL query. But Why can&#39;t we query all these data from database in just one single call.</p><p>Let&#39;s say we have data models <code>Shop</code>, <code>Product</code>, <code>Color</code>. A shop has many products and each product has many colors. For traditional ORM, when we select Entity and its relation like this.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> shops <span class="token operator">=</span> <span class="token keyword">await</span> Shop<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span><span class="token string">&#39;products.colors&#39;</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>It generates several SQL statements</p><div class="language-sql ext-sql"><pre class="language-sql"><code>   <span class="token keyword">Select</span> id <span class="token keyword">FROM</span> shop<span class="token punctuation">;</span>  \n   <span class="token comment"># result: 1, 2, 3</span>\n\n   <span class="token keyword">Select</span> id <span class="token keyword">FROM</span> Product <span class="token keyword">where</span> shopId <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n   <span class="token comment"># result: 1, 2, 3, 4, 5</span>\n\n   <span class="token keyword">Select</span> id <span class="token keyword">FROM</span> Color <span class="token keyword">where</span> productId <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n   <span class="token comment"># result: 1, 2</span>\n</code></pre></div><p>But actually we can query the data in only one SQL statement instead:</p><div class="language-sql ext-sql"><pre class="language-sql"><code>  <span class="token keyword">SELECT</span> shop<span class="token punctuation">.</span>id<span class="token punctuation">,</span> \n    <span class="token punctuation">(</span><span class="token keyword">SELECT</span> JSON_ARRAYAGG<span class="token punctuation">(</span>JSON_Array<span class="token punctuation">(</span>id<span class="token punctuation">,</span> colors<span class="token punctuation">)</span><span class="token punctuation">)</span>\n        <span class="token keyword">FROM</span>\n        <span class="token punctuation">(</span>\n          <span class="token keyword">SELECT</span> product<span class="token punctuation">.</span>id<span class="token punctuation">,</span> \n            <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>same way<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> colors\n          <span class="token keyword">FROM</span> product <span class="token keyword">WHERE</span> product<span class="token punctuation">.</span>id <span class="token operator">=</span> shop<span class="token punctuation">.</span>id\n        <span class="token punctuation">)</span> <span class="token keyword">AS</span> t\n    <span class="token punctuation">)</span> <span class="token keyword">AS</span> <span class="token punctuation">`</span>products<span class="token punctuation">`</span> \n  <span class="token keyword">FROM</span> shop<span class="token punctuation">;</span>\n\n</code></pre></div><p>The trick is using the SQL server build-in function to construct JSON objects. It may be more efficient than the traditional way. taichi-orm is currently using this approach.</p><h3 id="better-control-on-relation-records" tabindex="-1"><a class="header-anchor" href="#better-control-on-relation-records" aria-hidden="true">#</a> Better control on relation records</h3><p>For some traditional ORM, it is not easy to apply filters on the pivot table of <code>manyToMany</code> relationship&quot; because the Model definition is abstracted. But our Model API allows us applying additional where clause during query. See below code examples.</p><p>Models:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Color</span> <span class="token keyword">extends</span> <span class="token class-name">Model</span> <span class="token punctuation">{</span>\n  id <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span>PrimaryKeyType<span class="token punctuation">)</span>\n  <span class="token comment">//possible values: &#39;red&#39;, &#39;blue&#39;...</span>\n  code <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringNotNullType</span><span class="token punctuation">(</span><span class="token punctuation">{</span>length<span class="token operator">:</span> <span class="token number">50</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Product</span> <span class="token keyword">extends</span> <span class="token class-name">Model</span><span class="token punctuation">{</span>\n  id<span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span>PrimaryKeyType<span class="token punctuation">)</span>\n  <span class="token comment">//One Product has many Colors</span>\n  colors <span class="token operator">=</span> Product<span class="token punctuation">.</span><span class="token function">hasManyThrough</span><span class="token punctuation">(</span>\n      ProductColor<span class="token punctuation">,</span> Color<span class="token punctuation">,</span> <span class="token string">&#39;id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;colorId&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;productId&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// it represents the pivot table</span>\n<span class="token comment">// there is a column &#39;type&#39; which means the color type of the product</span>\n<span class="token keyword">class</span> <span class="token class-name">ProductColor</span> <span class="token keyword">extends</span> <span class="token class-name">Model</span><span class="token punctuation">{</span>\n  id<span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span>PrimaryKeyType<span class="token punctuation">)</span>\n  colorId <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span>NumberNotNullType<span class="token punctuation">)</span>\n  productId <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span>NumberNotNullType<span class="token punctuation">)</span>\n  <span class="token comment">//possible values: &#39;main&#39;, &#39;minor&#39;</span>\n  type <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringNotNullType</span><span class="token punctuation">(</span><span class="token punctuation">{</span>length<span class="token operator">:</span> <span class="token number">50</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><p>Query example 1: Select all Products with the filtered Colors that are in red and is the main color of that product.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">await</span> Product<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  select<span class="token operator">:</span> <span class="token punctuation">{</span>\n    colors<span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token comment">// root is Color table, through is pivot table</span>\n      <span class="token function-variable function">where</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>root<span class="token punctuation">,</span> through<span class="token punctuation">,</span> And<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">And</span><span class="token punctuation">(</span>\n        root<span class="token punctuation">.</span>code<span class="token operator">:</span> <span class="token string">&#39;red&#39;</span><span class="token punctuation">,</span>     <span class="token comment">// Color.code = &#39;red&#39;</span>\n        through<span class="token punctuation">.</span>type<span class="token operator">:</span> <span class="token string">&#39;main&#39;</span>  <span class="token comment">// ProductColor.type = &#39;main&#39;</span>\n      <span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="highlight-lines"><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br><br></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>Query example 2: Select any Products which have Colors that are in red and is the main color of that product.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">await</span> Product<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  select<span class="token operator">:</span> <span class="token punctuation">{</span>\n    colors<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token comment">// root is Product table</span>\n  <span class="token function-variable function">where</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>root<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> root<span class="token punctuation">.</span><span class="token function">colors</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token comment">// root is Color table, through is pivot table</span>\n    <span class="token function-variable function">where</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>root<span class="token punctuation">,</span> through<span class="token punctuation">,</span> And<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">And</span><span class="token punctuation">(</span>\n      root<span class="token punctuation">.</span>code<span class="token operator">:</span> <span class="token string">&#39;red&#39;</span><span class="token punctuation">,</span>     <span class="token comment">// Color.code = &#39;red&#39;</span>\n      through<span class="token punctuation">.</span>type<span class="token operator">:</span> <span class="token string">&#39;main&#39;</span>  <span class="token comment">// ProductColor.type = &#39;main&#39;</span>\n    <span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="highlight-lines"><br><br><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h3 id="more-adaptive-on-changes-of-the-business-requirements" tabindex="-1"><a class="header-anchor" href="#more-adaptive-on-changes-of-the-business-requirements" aria-hidden="true">#</a> More Adaptive on changes of the business Requirements</h3><p>traditionally, when building a system , it starts from simple requirement, usually the simple Object API of ORM can cater most of the use case. But when the requirements changes, you may find that only sql query builder or native sql can fulfill your businesss needs, so you have to rewrite the data logics from code from Model API to query builder.</p><p>One of the typical cases is a e-shop app. In early stage, your product page simply lists out the products by product creation date in ascending order (with pagination). As a developer, we usually use the Object API to cater that. But later the product owner ask you to list products by more complex logics like “Order By price of the products but Order By promotion date of the products if today is that promotion date”.</p><p>The traditional Model API cannot cater this because the FindOption accepts array of field names only, we need raw SQL to achieve this requirement.</p><p>But Taichi Model API is more adaptive, in this case, you just need to modify the OrderBy of the FindOption.</p><p>Before:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> products <span class="token operator">=</span> <span class="token keyword">await</span> Product<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>\n  <span class="token punctuation">{</span>\n    orderBy<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;price&#39;</span><span class="token punctuation">]</span>\n    limit<span class="token operator">:</span> <span class="token number">50</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">)</span>\n\n</code></pre><div class="highlight-lines"><br><br><div class="highlight-line"> </div><br><br><br><br></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>After:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> products <span class="token operator">=</span> <span class="token keyword">await</span> Product<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>\n  <span class="token punctuation">{</span>\n    <span class="token function-variable function">orderBy</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>root<span class="token punctuation">,</span> If<span class="token punctuation">,</span> Now<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>\n      <span class="token punctuation">{</span> \n        value<span class="token operator">:</span> <span class="token function">If</span><span class="token punctuation">(</span> \n          root<span class="token punctuation">.</span>promotionDate<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>Now<span class="token punctuation">)</span><span class="token punctuation">,</span>\n          <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>\n          root<span class="token punctuation">.</span>price     \n          <span class="token punctuation">)</span><span class="token punctuation">,</span>\n        order<span class="token operator">:</span> <span class="token string">&#39;asc&#39;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    limit<span class="token operator">:</span> <span class="token number">50</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">)</span>\n</code></pre><div class="highlight-lines"><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div>',46),t={},p=(0,a(3744).Z)(t,[["render",function(n,s){return e}]])},3744:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,e]of s)a[n]=e;return a}}}]);