"use strict";(self.webpackChunktaichi_orm=self.webpackChunktaichi_orm||[]).push([[103],{2983:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t={key:"v-37b51384",path:"/guide/concepts/database-context.html",title:"DatabaseContext",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"Usage",slug:"usage",children:[{level:3,title:"Get the ModelRepository",slug:"get-the-modelrepository",children:[]},{level:3,title:"Create Models",slug:"create-models",children:[]},{level:3,title:"Execute SQL Statement",slug:"execute-sql-statement",children:[]},{level:3,title:"Start Transaction",slug:"start-transaction",children:[]},{level:3,title:"Create Query Builders",slug:"create-query-builders",children:[]},{level:3,title:"SQL Operators and Functions",slug:"sql-operators-and-functions",children:[]}]}],filePathRelative:"guide/concepts/database-context.md",git:{updatedTime:1638874801e3,contributors:[{name:"Eddie Tang",email:"thfai2000@gmail.com",commits:8}]}}},4708:(n,s,a)=>{a.r(s),a.d(s,{default:()=>p});const t=(0,a(6252).uE)('<h1 id="databasecontext" tabindex="-1"><a class="header-anchor" href="#databasecontext" aria-hidden="true">#</a> DatabaseContext</h1><p>You can get your <code>DatabaseContext</code> from your <code>ORM</code> instance.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// Assume that the orm instance is defined in your &#39;orm.js&#39;</span>\n<span class="token keyword">const</span> orm <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./orm&#39;</span><span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> context <span class="token operator">=</span> orm<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="highlight-lines"><br><br><br><div class="highlight-line"> </div></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>It allow you to specific the prefix of the table names. When the ORM resolve the table names to construct SQL, the prefix will be added during query. See below codes.</p><p>It may be useful in some special cases.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> context <span class="token operator">=</span> orm<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    tablePrefix<span class="token operator">:</span> <span class="token string">&#39;store1_&#39;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="highlight-lines"><br><div class="highlight-line"> </div><br></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="usage" tabindex="-1"><a class="header-anchor" href="#usage" aria-hidden="true">#</a> Usage</h2><h3 id="get-the-modelrepository" tabindex="-1"><a class="header-anchor" href="#get-the-modelrepository" aria-hidden="true">#</a> Get the <code>ModelRepository</code></h3><p>Get the <code>ModelRepository</code> by names</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> Model1Repo<span class="token punctuation">,</span> Model2Repo <span class="token punctuation">}</span> <span class="token operator">=</span> context<span class="token punctuation">.</span>repos\n\n<span class="token keyword">const</span> records <span class="token operator">=</span> <span class="token keyword">await</span> Model1Repo<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Get the <code>ModelRepository</code> by Model Class</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> Model1Repo <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getRepository</span><span class="token punctuation">(</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./models/model1&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> records <span class="token operator">=</span> <span class="token keyword">await</span> Model1Repo<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="create-models" tabindex="-1"><a class="header-anchor" href="#create-models" aria-hidden="true">#</a> Create Models</h3><p>It creates tables in database</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">await</span> context<span class="token punctuation">.</span><span class="token function">createModels</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="execute-sql-statement" tabindex="-1"><a class="header-anchor" href="#execute-sql-statement" aria-hidden="true">#</a> Execute SQL Statement</h3><p>It actually runs the <code>Knex.Raw()</code> to execute SQL statement and returns raw records.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> rawRecords <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">executeStatement</span><span class="token punctuation">(</span><span class="token string">&#39;SELECT 1 FROM table1&#39;</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="start-transaction" tabindex="-1"><a class="header-anchor" href="#start-transaction" aria-hidden="true">#</a> Start Transaction</h3><ul><li><p>It runs the callback function after the transaction started and return a <code>Promise</code> of the result.</p></li><li><p><code>trx</code> is the Knex Transaction instance that is used by Model API calls or Query Builder.</p></li><li><p>Model API or Query Builders can run query with Transaction instance by using <code>usingConnection()</code>.</p></li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">await</span> context<span class="token punctuation">.</span><span class="token function">startTransaction</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token parameter">trx</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> <span class="token punctuation">{</span> Model1Repo <span class="token punctuation">}</span> <span class="token operator">=</span> context<span class="token punctuation">.</span>repos\n    <span class="token keyword">return</span> <span class="token keyword">await</span> Model1Repo<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n                field1<span class="token operator">:</span> newValue\n            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n                id<span class="token operator">:</span> <span class="token number">1</span>\n            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">usingConnection</span><span class="token punctuation">(</span>trx<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="highlight-lines"><div class="highlight-line"> </div><br><br><br><br><br><br><div class="highlight-line"> </div></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="create-query-builders" tabindex="-1"><a class="header-anchor" href="#create-query-builders" aria-hidden="true">#</a> Create Query Builders</h3><p>Context provides various kind of query builders for data query, insertion, updates and deletion.</p><p>Please see <a href="./query-builder">Query Builder</a> for more details.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// build insert statement</span>\ncontext<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>Model1<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">[</span>data<span class="token punctuation">]</span><span class="token punctuation">)</span>\n\n<span class="token comment">// build update statement</span>\ncontext<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>Model1<span class="token punctuation">.</span><span class="token function">datasource</span><span class="token punctuation">(</span><span class="token string">&#39;alias&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n<span class="token comment">// build delete statement</span>\ncontext<span class="token punctuation">.</span><span class="token function">del</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>Model1<span class="token punctuation">.</span><span class="token function">datasource</span><span class="token punctuation">(</span><span class="token string">&#39;alias&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n<span class="token comment">// build select statement</span>\ncontext<span class="token punctuation">.</span><span class="token function">dataset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>Model1<span class="token punctuation">.</span><span class="token function">datasource</span><span class="token punctuation">(</span><span class="token string">&#39;alias&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n<span class="token comment">// build raw sql</span>\ncontext<span class="token punctuation">.</span><span class="token function">scalar</span><span class="token punctuation">(</span><span class="token string">&#39;SELECT 1 FROM Model1 WHERE id = ?&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> records <span class="token operator">=</span> <span class="token keyword">await</span> querybuilder<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="sql-operators-and-functions" tabindex="-1"><a class="header-anchor" href="#sql-operators-and-functions" aria-hidden="true">#</a> SQL Operators and Functions</h3><p>Context provides SQL Operators and Functions that can be accessed from <code>$</code>.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>$<span class="token punctuation">.</span><span class="token function">And</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token comment">// Output: 1 And 2</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>$<span class="token punctuation">.</span><span class="token function">Or</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token comment">// Output: 1 Or 2</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>$<span class="token punctuation">.</span><span class="token function">Exists</span><span class="token punctuation">(</span>Model1<span class="token punctuation">.</span><span class="token function">dataset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token comment">// Output: EXISTS (SELECT * FROM Model1)</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>$<span class="token punctuation">.</span><span class="token function">Between</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token comment">// Output: BETWEEN 10 AND 20</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>$<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token comment">// Output: BETWEEN 10 AND 20</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>Please see reference for more operators and functions</p></div>',30),e={},p=(0,a(3744).Z)(e,[["render",function(n,s){return t}]])},3744:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,t]of s)a[n]=t;return a}}}]);