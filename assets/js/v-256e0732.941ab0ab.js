"use strict";(self.webpackChunktaichi_orm=self.webpackChunktaichi_orm||[]).push([[623],{8957:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-256e0732",path:"/guide/use-cases/access-control.html",title:"Access Control",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"Role-Based Access Control",slug:"role-based-access-control",children:[]}],filePathRelative:"guide/use-cases/access-control.md",git:{updatedTime:1638641763e3,contributors:[{name:"Eddie Tang",email:"thfai2000@gmail.com",commits:1}]}}},8203:(n,s,a)=>{a.r(s),a.d(s,{default:()=>e});const p=(0,a(6252).uE)('<h1 id="access-control" tabindex="-1"><a class="header-anchor" href="#access-control" aria-hidden="true">#</a> Access Control</h1><p>Imagine your Entity Product can be accessible by certain users. You can define a property that indicate it is accessible or not.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Product</span> <span class="token keyword">extends</span> <span class="token class-name">Model</span> <span class="token punctuation">{</span>\n\n    id <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span>PrimaryKeyType<span class="token punctuation">)</span>\n\n    isAccessibleByUserId <span class="token operator">=</span> Product<span class="token punctuation">.</span><span class="token function">compute</span><span class="token punctuation">(</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> userId<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> CFReturn<span class="token operator">&lt;</span><span class="token builtin">boolean</span><span class="token operator">&gt;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token comment">// here we use a query builder to query another Model &#39;UserProduct&#39; to find out if the product can be accessed by a user</span>\n        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DScalar</span><span class="token punctuation">(</span>context <span class="token operator">=&gt;</span> context<span class="token punctuation">.</span><span class="token function">dataset</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n          <span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span> UserProduct<span class="token punctuation">.</span><span class="token function">datasource</span><span class="token punctuation">(</span><span class="token string">&#39;up&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>\n          <span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n            <span class="token string">&#39;up.userId&#39;</span><span class="token operator">:</span> userId<span class="token punctuation">,</span>\n            <span class="token string">&#39;up.productId&#39;</span><span class="token operator">:</span> parent<span class="token punctuation">.</span>id\n          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>Then you can use it like a function.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>  <span class="token keyword">const</span> currentUserId <span class="token operator">=</span> <span class="token number">1</span>\n\n  <span class="token keyword">let</span> targetProducts <span class="token operator">=</span> <span class="token keyword">await</span> Product<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token function-variable function">where</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>root<span class="token punctuation">,</span> And<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">And</span><span class="token punctuation">(</span>\n      <span class="token punctuation">{</span> isActive<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      root<span class="token punctuation">.</span><span class="token function">isAccessibleByUserId</span><span class="token punctuation">(</span>currentUserId<span class="token punctuation">)</span>  <span class="token comment">// the function call return a boolean Scalar</span>\n    <span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="role-based-access-control" tabindex="-1"><a class="header-anchor" href="#role-based-access-control" aria-hidden="true">#</a> Role-Based Access Control</h2><p>If you find some logics are often repeated on many Models. It is suggested to create a util function. Let say you want all Entities has Role-Based Access Control. Here are the related tables Role, User, RoleEntity.</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>User  \n- id\n- roleId\n\nRole\n- id\n\nRoleEntity\n- roleId\n- entityName   (Model which that role can access)\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>We define a Model class as a base class of the other models you want to be protected with Access Control</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">//rbacModel.ts</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">RBACModel</span> <span class="token keyword">extends</span> <span class="token class-name">Model</span> <span class="token punctuation">{</span>\n\n    <span class="token keyword">static</span> <span class="token function">propertyOfEditableByUserId</span><span class="token punctuation">(</span>entityName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n\n      <span class="token keyword">return</span> Product<span class="token punctuation">.</span><span class="token function">compute</span><span class="token punctuation">(</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> userId<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> CFReturn<span class="token operator">&lt;</span><span class="token builtin">boolean</span><span class="token operator">&gt;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n          <span class="token comment">// here we use a query builder to query another Model &#39;UserProduct&#39; to find out if the product can be accessed by a user</span>\n          <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DScalar</span><span class="token punctuation">(</span>context <span class="token operator">=&gt;</span> context<span class="token punctuation">.</span><span class="token function">dataset</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n            <span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span> Role<span class="token punctuation">.</span><span class="token function">datasource</span><span class="token punctuation">(</span><span class="token string">&#39;role&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>\n            <span class="token punctuation">.</span><span class="token function">innerJoin</span><span class="token punctuation">(</span> User<span class="token punctuation">.</span><span class="token function">datasource</span><span class="token punctuation">(</span><span class="token string">&#39;user&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>role<span class="token punctuation">,</span> user<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> user<span class="token punctuation">.</span>roleId<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>role<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span>\n            <span class="token punctuation">.</span><span class="token function">innerJoin</span><span class="token punctuation">(</span> RoleEntity<span class="token punctuation">.</span><span class="token function">datasource</span><span class="token punctuation">(</span><span class="token string">&#39;re&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>role<span class="token punctuation">,</span> re<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> role<span class="token punctuation">.</span>id<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>roleId<span class="token punctuation">)</span> <span class="token punctuation">)</span>\n            <span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>re<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> re<span class="token punctuation">.</span>entityName<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span> entityName <span class="token punctuation">)</span><span class="token punctuation">)</span>\n            <span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n          <span class="token punctuation">)</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">//product.ts</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Product</span> <span class="token keyword">extends</span> <span class="token class-name">RBACModel</span> <span class="token punctuation">{</span>\n  id <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span>PrimaryKeyType<span class="token punctuation">)</span>\n\n  <span class="token comment">//use the static method to create a property</span>\n  isEditableByUserId <span class="token operator">=</span> Product<span class="token punctuation">.</span><span class="token function">propertyOfEditableByUserId</span><span class="token punctuation">(</span><span class="token string">&#39;product&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>  <span class="token keyword">const</span> currentUserId <span class="token operator">=</span> <span class="token number">1</span>\n\n  <span class="token keyword">let</span> products <span class="token operator">=</span> <span class="token keyword">await</span> Product<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token function-variable function">where</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>root<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> \n      root<span class="token punctuation">.</span><span class="token function">isEditableByUserId</span><span class="token punctuation">(</span>currentUserId<span class="token punctuation">)</span>  <span class="token comment">// the function call return a boolean Scalar</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div>',12),t={},e=(0,a(3744).Z)(t,[["render",function(n,s){return p}]])},3744:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,p]of s)a[n]=p;return a}}}]);