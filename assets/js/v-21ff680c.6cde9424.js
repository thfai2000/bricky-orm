"use strict";(self.webpackChunktaichi_orm=self.webpackChunktaichi_orm||[]).push([[507],{5564:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-21ff680c",path:"/guide/concepts/property.html",title:"Property",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"FieldProperty",slug:"fieldproperty",children:[{level:3,title:"Usage",slug:"usage",children:[]}]},{level:2,title:"ComputeProperty",slug:"computeproperty",children:[{level:3,title:"ComputeFunction",slug:"computefunction",children:[]},{level:3,title:"CompiledComputeFunction",slug:"compiledcomputefunction",children:[]},{level:3,title:"Usage",slug:"usage-1",children:[]}]}],filePathRelative:"guide/concepts/property.md",git:{updatedTime:1638891041e3,contributors:[{name:"Eddie Tang",email:"thfai2000@gmail.com",commits:4}]}}},139:(n,s,a)=>{a.r(s),a.d(s,{default:()=>p});const e=(0,a(6252).uE)('<h1 id="property" tabindex="-1"><a class="header-anchor" href="#property" aria-hidden="true">#</a> Property</h1><ul><li>It represents a property of <code>Model</code></li><li>A <code>Property</code> has <code>PropertType</code> that represents the data type of that property.</li><li>The Model class or Model instance provides methods such as <code>.field()</code> and <code>.compute()</code> to create Property instance.</li></ul><p>There are two kinds of Property of a Model</p><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;">FieldProperty</td><td style="text-align:left;">a field of a table.</td></tr><tr><td style="text-align:left;">ComputeProperty</td><td style="text-align:left;">a virtual field computed using other fields or SQL functions</td></tr></tbody></table><h2 id="fieldproperty" tabindex="-1"><a class="header-anchor" href="#fieldproperty" aria-hidden="true">#</a> FieldProperty</h2><ul><li>It represents a field of a table and is defined in <code>Model</code> class.</li><li>It can be created by method <code>model.field()</code> that accepts <code>PropertyType</code> constructor or <code>PropertType</code> instance. Please see <a href="./property-type">PropertType</a> for details.</li></ul><h3 id="usage" tabindex="-1"><a class="header-anchor" href="#usage" aria-hidden="true">#</a> Usage</h3><p>Define various properties with different types and options.</p><p>Example:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">MyModel</span> <span class="token keyword">extends</span> <span class="token class-name">Model</span> <span class="token punctuation">{</span>\n  <span class="token comment">// Nullable Integer</span>\n  prop1 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span>NumberType<span class="token punctuation">)</span>\n\n  <span class="token comment">// Nullable varchar(50)</span>\n  prop2 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringType</span><span class="token punctuation">(</span><span class="token punctuation">{</span>length<span class="token operator">:</span> <span class="token number">50</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n  <span class="token comment">// Non-nullable varchar(255)</span>\n  prop3 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span>StringTypeNotNull<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="highlight-lines"><br><div class="highlight-line"> </div><div class="highlight-line"> </div><br><div class="highlight-line"> </div><div class="highlight-line"> </div><br><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>In case, the field name can be overrided by a given name.</p><p>Example:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">MyModel</span> <span class="token keyword">extends</span> <span class="token class-name">Model</span> <span class="token punctuation">{</span>\n  <span class="token comment">// the table field name would be &#39;p_r_o_p_1&#39;</span>\n  prop1 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span>NumberType<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setFieldName</span><span class="token punctuation">(</span><span class="token string">&#39;p_r_o_p_1&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span> \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Access Field Value using Datasource.$</p><p>Example:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// It selects records with prop1 equals 5</span>\n<span class="token keyword">await</span> MyModelRepo<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token function-variable function">where</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>root<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> root<span class="token punctuation">.</span>prop1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="computeproperty" tabindex="-1"><a class="header-anchor" href="#computeproperty" aria-hidden="true">#</a> ComputeProperty</h2><ul><li>It represents a SQL value calculated by using other <code>FieldProperty</code> or SQL functions.</li><li>It can be created by method <code>Model.compute()</code> that accepts a <code>ComputeFunction</code>.</li><li><code>ComputeFunction</code> that defines how to create a <code>Scalar</code> (a single SQL value). Please see <a href="./property-type">PropertType</a> for details.</li></ul><h3 id="computefunction" tabindex="-1"><a class="header-anchor" href="#computefunction" aria-hidden="true">#</a> ComputeFunction</h3><ul><li>It is a function accepts two arguments</li><li>returns a <code>Scalar</code> (a single SQL value)</li></ul><table><thead><tr><th>Function Arguments</th><th>Descriptions</th><th>Optional</th></tr></thead><tbody><tr><td>parent</td><td><code>Datasource</code> of the current Model</td><td>No</td></tr><tr><td>arg</td><td>Value given in execution</td><td>Yes</td></tr></tbody></table><p>A simple <code>ComputeFunction</code> Example:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token punctuation">(</span><span class="token parameter">parent<span class="token punctuation">,</span> args</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token comment">// add 5 to the number value of prop1</span>\n    <span class="token keyword">return</span> parent<span class="token punctuation">.</span>prop1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="compiledcomputefunction" tabindex="-1"><a class="header-anchor" href="#compiledcomputefunction" aria-hidden="true">#</a> CompiledComputeFunction</h3><ul><li>It is a function that wraps the <code>Datasource</code> and call the <code>ComputeFunction</code>.</li><li><code>Datasource.$</code> of a <code>Model</code> can access the <code>CompiledComputeFunction</code> of any <code>Property</code> of a <code>Model</code></li><li>Returns a <code>Scalar</code> (a single SQL value)</li></ul><table><thead><tr><th>Function Arguments</th><th>Descriptions</th><th>Optional</th></tr></thead><tbody><tr><td>arg</td><td>Value given in execution</td><td>Yes</td></tr></tbody></table><h3 id="usage-1" tabindex="-1"><a class="header-anchor" href="#usage-1" aria-hidden="true">#</a> Usage</h3><h4 id="example-1" tabindex="-1"><a class="header-anchor" href="#example-1" aria-hidden="true">#</a> Example 1:</h4><p>Access the <code>CompiledComputeFunction</code></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">MyModel</span> <span class="token keyword">extends</span> <span class="token class-name">Model</span> <span class="token punctuation">{</span>\n    prop1 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span>NumberType<span class="token punctuation">)</span>\n    prop2 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">compute</span><span class="token punctuation">(</span> \n      <span class="token comment">// add 5 to the number value of prop1</span>\n      <span class="token punctuation">(</span><span class="token parameter">parent<span class="token punctuation">,</span> arg</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> parent<span class="token punctuation">.</span>prop1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span>\n    <span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> scalar <span class="token operator">=</span> MyModel<span class="token punctuation">.</span><span class="token function">datasource</span><span class="token punctuation">(</span><span class="token string">&#39;alias1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>$<span class="token punctuation">.</span><span class="token function">prop2</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>\n\n<span class="token comment">//Output SQL string: alias1.prop1 + 5</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">await</span> scalar<span class="token punctuation">.</span><span class="token function">toRaw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>\n</code></pre><div class="highlight-lines"><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br><div class="highlight-line"> </div><br><br><br></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h4 id="example-2" tabindex="-1"><a class="header-anchor" href="#example-2" aria-hidden="true">#</a> Example 2:</h4><p>Use the <code>CompiledComputeFunction</code> in data query.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">MyModel</span> <span class="token keyword">extends</span> <span class="token class-name">Model</span> <span class="token punctuation">{</span>\n    prop1 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span>NumberType<span class="token punctuation">)</span>\n    prop2 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">compute</span><span class="token punctuation">(</span> \n      <span class="token comment">// add 5 to the number value of prop1</span>\n      <span class="token punctuation">(</span><span class="token parameter">parent<span class="token punctuation">,</span> arg</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> parent<span class="token punctuation">.</span>prop1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span>\n    <span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// It selects records with </span>\n<span class="token keyword">await</span> MyModelRepo<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token function-variable function">where</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>root<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> root<span class="token punctuation">.</span>prop2<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><br><br></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><details class="custom-container details"><p>The above codes, <code>root</code> is the <code>Datasource.$</code>. The <code>find()</code> method actually produce and execute the SQL:</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">SELECT</span> root<span class="token punctuation">.</span>prop1 \n<span class="token keyword">FROM</span> MyModel <span class="token keyword">AS</span> root \n<span class="token keyword">WHERE</span> root<span class="token punctuation">.</span>prop1 <span class="token operator">+</span> <span class="token number">5</span> <span class="token operator">=</span> <span class="token number">7</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></details>',34),t={},p=(0,a(3744).Z)(t,[["render",function(n,s){return e}]])},3744:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,e]of s)a[n]=e;return a}}}]);