"use strict";(self.webpackChunktaichi_orm=self.webpackChunktaichi_orm||[]).push([[292],{849:(e,a,n)=>{n.r(a),n.d(a,{data:()=>s});const s={key:"v-798e623b",path:"/guide/concepts/model-api.html",title:"Model API",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:".createOne()",slug:"createone",children:[]},{level:2,title:".createEach()",slug:"createeach",children:[]},{level:2,title:".update()",slug:"update",children:[]},{level:2,title:"delete()",slug:"delete",children:[]},{level:2,title:"deleteOne()",slug:"deleteone",children:[]},{level:2,title:"find()",slug:"find",children:[]},{level:2,title:"findOne()",slug:"findone",children:[]},{level:2,title:"findOneOrNull()",slug:"findoneornull",children:[]},{level:2,title:"findOptions",slug:"findoptions",children:[{level:3,title:"select",slug:"select",children:[]},{level:3,title:"selectProps",slug:"selectprops",children:[]},{level:3,title:"where",slug:"where",children:[]}]}],filePathRelative:"guide/concepts/model-api.md",git:{updatedTime:1639159614e3,contributors:[{name:"Eddie Tang",email:"thfai2000@gmail.com",commits:8}]}}},1556:(e,a,n)=>{n.r(a),n.d(a,{default:()=>f});var s=n(6252);const t=(0,s.uE)('<h1 id="model-api" tabindex="-1"><a class="header-anchor" href="#model-api" aria-hidden="true">#</a> Model API</h1><ul><li>Model API (<code>ModelRepository</code> methods) is actually implemented by using Query Builder.</li><li>But it provides a simpler way to carry out <code>create</code>, <code>update</code> and <code>delete</code> operations on a Model.</li></ul><h2 id="createone" tabindex="-1"><a class="header-anchor" href="#createone" aria-hidden="true">#</a> <code>.createOne()</code></h2><ul><li>Creates one record of Model Example:</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> createdRecord <span class="token operator">=</span> <span class="token keyword">await</span> context<span class="token punctuation">.</span>ModelRepo1<span class="token punctuation">.</span><span class="token function">createOne</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="createeach" tabindex="-1"><a class="header-anchor" href="#createeach" aria-hidden="true">#</a> <code>.createEach()</code></h2><ul><li>Creates many record of Model</li><li>The records are created one by one in multiple sql statements</li></ul><p>Example:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> createdRecords <span class="token operator">=</span> <span class="token keyword">await</span> context<span class="token punctuation">.</span>ModelRepo1<span class="token punctuation">.</span><span class="token function">createEach</span><span class="token punctuation">(</span>arrayOfData<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="update" tabindex="-1"><a class="header-anchor" href="#update" aria-hidden="true">#</a> <code>.update()</code></h2><h2 id="delete" tabindex="-1"><a class="header-anchor" href="#delete" aria-hidden="true">#</a> <code>delete()</code></h2><h2 id="deleteone" tabindex="-1"><a class="header-anchor" href="#deleteone" aria-hidden="true">#</a> <code>deleteOne()</code></h2><h2 id="find" tabindex="-1"><a class="header-anchor" href="#find" aria-hidden="true">#</a> <code>find()</code></h2><h2 id="findone" tabindex="-1"><a class="header-anchor" href="#findone" aria-hidden="true">#</a> <code>findOne()</code></h2><h2 id="findoneornull" tabindex="-1"><a class="header-anchor" href="#findoneornull" aria-hidden="true">#</a> <code>findOneOrNull()</code></h2><h2 id="findoptions" tabindex="-1"><a class="header-anchor" href="#findoptions" aria-hidden="true">#</a> <code>findOptions</code></h2><h3 id="select" tabindex="-1"><a class="header-anchor" href="#select" aria-hidden="true">#</a> <code>select</code></h3><h3 id="selectprops" tabindex="-1"><a class="header-anchor" href="#selectprops" aria-hidden="true">#</a> <code>selectProps</code></h3><h3 id="where" tabindex="-1"><a class="header-anchor" href="#where" aria-hidden="true">#</a> <code>where</code></h3>',19),o=(0,s._)("li",null,"Model API is implemented by using Query Builder.",-1),c=(0,s.Uk)("The "),l=(0,s._)("code",null,"where",-1),p=(0,s.Uk)(" option is passed to the Builder. For more options, please see "),i=(0,s.Uk)("where"),d=(0,s.Uk)("But the target Model (table) is assigned a table alias with 'root'. About table alias, please see "),r=(0,s.Uk)("Datasource"),u=(0,s.Uk)("."),h=(0,s.uE)('<p>Example:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> records <span class="token operator">=</span> <span class="token keyword">await</span> context<span class="token punctuation">.</span>ModelRepo1<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token function-variable function">where</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>root<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> root<span class="token punctuation">.</span>id<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>It equals to <code>dataset</code></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> records <span class="token operator">=</span> <span class="token keyword">await</span> context<span class="token punctuation">.</span><span class="token function">dataset</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>ModelRepo1<span class="token punctuation">.</span><span class="token function">datasource</span><span class="token punctuation">(</span><span class="token string">&#39;root&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token punctuation">{</span> \n        <span class="token string">&#39;root.id&#39;</span><span class="token operator">:</span> <span class="token number">1</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>',4),k={},f=(0,n(3744).Z)(k,[["render",function(e,a){const n=(0,s.up)("RouterLink");return(0,s.wg)(),(0,s.iD)(s.HY,null,[t,(0,s._)("ul",null,[o,(0,s._)("li",null,[c,l,p,(0,s.Wm)(n,{to:"/guide/concepts/query-builder.html#where"},{default:(0,s.w5)((()=>[i])),_:1})]),(0,s._)("li",null,[d,(0,s.Wm)(n,{to:"/guide/concepts/schema.html#datasource"},{default:(0,s.w5)((()=>[r])),_:1}),u])]),h],64)}]])},3744:(e,a)=>{a.Z=(e,a)=>{const n=e.__vccOpts||e;for(const[e,s]of a)n[e]=s;return n}}}]);