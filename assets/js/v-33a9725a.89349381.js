"use strict";(self.webpackChunktaichi_orm=self.webpackChunktaichi_orm||[]).push([[287],{845:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t={key:"v-33a9725a",path:"/guide/concepts/relations.html",title:"Relations",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:3,title:"belongsTo",slug:"belongsto",children:[]},{level:3,title:"hasMany",slug:"hasmany",children:[]},{level:3,title:"hasManyThrough",slug:"hasmanythrough",children:[]}],filePathRelative:"guide/concepts/relations.md",git:{updatedTime:1639159614e3,contributors:[{name:"Eddie Tang",email:"thfai2000@gmail.com",commits:4}]}}},4169:(n,s,a)=>{a.r(s),a.d(s,{default:()=>h});var t=a(6252);const e=(0,t.uE)('<h1 id="relations" tabindex="-1"><a class="header-anchor" href="#relations" aria-hidden="true">#</a> Relations</h1><ul><li><code>Models</code> can define <code>ComputeProperty</code> which related to other Models.</li><li>These Relation <code>ComputeProperty</code>&#39;s <code>CompiledComputeFunction</code> accept <code>findOptions</code> as arguments, it allows filtering or ordering the records of the related Models by your <code>findOptions</code>.</li><li>For <code>Model</code>, there are several function to create Relation <code>ComputeProperty</code></li></ul><ol><li><code>.belongsTo()</code></li><li><code>.hasMany()</code></li><li><code>.hasManyThrough()</code></li></ol>',3),o={class:"custom-container tip"},p=(0,t._)("p",{class:"custom-container-title"},"TIP",-1),l=(0,t.Uk)("For "),c=(0,t._)("code",null,"findOptions",-1),r=(0,t.Uk)(", please see "),i=(0,t.Uk)("findOptions"),d=(0,t.Uk)("."),u=(0,t.uE)('<h3 id="belongsto" tabindex="-1"><a class="header-anchor" href="#belongsto" aria-hidden="true">#</a> belongsTo</h3><table><thead><tr><th style="text-align:left;">Arguments</th><th style="text-align:left;">type</th><th style="text-align:left;">default value</th></tr></thead><tbody><tr><td style="text-align:left;">Related Model</td><td style="text-align:left;"><code>Model</code></td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">Name of the FieldProperty of current Model</td><td style="text-align:left;"><code>string</code></td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">Name of the FieldProperty of related Model</td><td style="text-align:left;"><code>string</code></td><td style="text-align:left;">&quot;id&quot;</td></tr></tbody></table><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Product</span> <span class="token keyword">extends</span> <span class="token class-name">Model</span> <span class="token punctuation">{</span>\n    id <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span>PrimaryKeyType<span class="token punctuation">)</span>\n    shopId <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span>NumberType<span class="token punctuation">)</span>\n    <span class="token comment">//define a computeProperty as &quot;belongsTo&quot; relation</span>\n    shop <span class="token operator">=</span> Product<span class="token punctuation">.</span><span class="token function">belongsTo</span><span class="token punctuation">(</span>Shop<span class="token punctuation">,</span> <span class="token string">&#39;shopId&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;id&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Shop</span> <span class="token keyword">extends</span> <span class="token class-name">Model</span> <span class="token punctuation">{</span>\n    id<span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span>PrimaryKeyType<span class="token punctuation">)</span>\n    <span class="token comment">//define a computeProperty as &quot;hasMany&quot; relation</span>\n    products <span class="token operator">=</span> Shop<span class="token punctuation">.</span><span class="token function">hasMany</span><span class="token punctuation">(</span>Product<span class="token punctuation">,</span> <span class="token string">&#39;shopId&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;id&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="highlight-lines"><br><br><br><br><div class="highlight-line"> </div><br><br><br><br><br><br><br></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="hasmany" tabindex="-1"><a class="header-anchor" href="#hasmany" aria-hidden="true">#</a> hasMany</h3><table><thead><tr><th style="text-align:left;">Arguments</th><th style="text-align:left;">type</th><th style="text-align:left;">default value</th></tr></thead><tbody><tr><td style="text-align:left;">Related Model</td><td style="text-align:left;"><code>Model</code></td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">Name of the FieldProperty of related Model</td><td style="text-align:left;"><code>string</code></td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">Name of the FieldProperty of current Model</td><td style="text-align:left;"><code>string</code></td><td style="text-align:left;">&quot;id&quot;</td></tr></tbody></table><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Product</span> <span class="token keyword">extends</span> <span class="token class-name">Model</span> <span class="token punctuation">{</span>\n    id <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span>PrimaryKeyType<span class="token punctuation">)</span>\n    shopId <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span>NumberType<span class="token punctuation">)</span>\n    <span class="token comment">//define a computeProperty as &quot;belongsTo&quot; relation</span>\n    shop <span class="token operator">=</span> Product<span class="token punctuation">.</span><span class="token function">belongsTo</span><span class="token punctuation">(</span>Shop<span class="token punctuation">,</span> <span class="token string">&#39;shopId&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;id&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Shop</span> <span class="token keyword">extends</span> <span class="token class-name">Model</span> <span class="token punctuation">{</span>\n    id<span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span>PrimaryKeyType<span class="token punctuation">)</span>\n    <span class="token comment">//define a computeProperty as &quot;hasMany&quot; relation</span>\n    products <span class="token operator">=</span> Shop<span class="token punctuation">.</span><span class="token function">hasMany</span><span class="token punctuation">(</span>Product<span class="token punctuation">,</span> <span class="token string">&#39;shopId&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;id&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><br></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="hasmanythrough" tabindex="-1"><a class="header-anchor" href="#hasmanythrough" aria-hidden="true">#</a> hasManyThrough</h3>',7),k={},h=(0,a(3744).Z)(k,[["render",function(n,s){const a=(0,t.up)("RouterLink");return(0,t.wg)(),(0,t.iD)(t.HY,null,[e,(0,t._)("div",o,[p,(0,t._)("p",null,[l,c,r,(0,t.Wm)(a,{to:"/guide/concepts/model-api.html#findoptions"},{default:(0,t.w5)((()=>[i])),_:1}),d])]),u],64)}]])},3744:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,t]of s)a[n]=t;return a}}}]);