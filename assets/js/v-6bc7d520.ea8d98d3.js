"use strict";(self.webpackChunktaichi_orm=self.webpackChunktaichi_orm||[]).push([[843],{6012:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-6bc7d520",path:"/guide/use-cases/scalar-transform.html",title:"Scalar Transformation",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"Define ComputeProperty based on another ComputeProperty",slug:"define-computeproperty-based-on-another-computeproperty",children:[]}],filePathRelative:"guide/use-cases/scalar-transform.md",git:{updatedTime:1638715152e3,contributors:[{name:"Eddie Tang",email:"thfai2000@gmail.com",commits:2}]}}},7173:(n,s,a)=>{a.r(s),a.d(s,{default:()=>e});const p=(0,a(6252).uE)('<h1 id="scalar-transformation" tabindex="-1"><a class="header-anchor" href="#scalar-transformation" aria-hidden="true">#</a> Scalar Transformation</h1><p>A Scalar can transformed into another Scalar in different type/value.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>    <span class="token keyword">let</span> ctx <span class="token operator">=</span> orm<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token keyword">let</span> <span class="token punctuation">{</span>Shop<span class="token punctuation">}</span> <span class="token operator">=</span> ctx<span class="token punctuation">.</span>repos\n\n    <span class="token comment">// find shops with its products that average price are between 20 and 30</span>\n    <span class="token keyword">let</span> shops <span class="token operator">=</span> <span class="token keyword">await</span> Shop<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      <span class="token function-variable function">where</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>root<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> root<span class="token punctuation">.</span><span class="token function">products</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span>ds <span class="token operator">=&gt;</span> \n        ds<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">{</span>root<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>average<span class="token operator">:</span> ctx<span class="token punctuation">.</span><span class="token function">scalar</span><span class="token punctuation">(</span><span class="token string">&#39;AVG(??)&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>root<span class="token punctuation">.</span>price<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">toDScalarWithType</span><span class="token punctuation">(</span>NumberNotNullType<span class="token punctuation">)</span>\n      <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">between</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>The above codes is using <code>Scalar.transform()</code> to find all shops with its products that average price are between 20 and 30.</p><p>Explain: The method call of <code>products</code> ComputeProperty returns a Scalar. That Scalar is in ArrayType but is transformed into a NumberType. The <code>Scalar.transform()</code> expose the original source &#39;Dataset&#39; that allows modification. Dataset is a query builder that allow you to select any value. In this case, we use raw SQL <code>DatabaseContext.scalar()</code> (Just like Knex.raw) in the SELECT statement.</p><h2 id="define-computeproperty-based-on-another-computeproperty" tabindex="-1"><a class="header-anchor" href="#define-computeproperty-based-on-another-computeproperty" aria-hidden="true">#</a> Define ComputeProperty based on another ComputeProperty</h2><p>A more advanced usage. ComputeProperty is very flexible. You can define it based on another existing ComputeProperty or FieldProperty</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Shop</span> <span class="token keyword">extends</span> <span class="token class-name">Model</span> <span class="token punctuation">{</span>\n    id <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span>PrimaryKeyType<span class="token punctuation">)</span>\n    location <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span>StringType<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Product</span> <span class="token keyword">extends</span> <span class="token class-name">Model</span> <span class="token punctuation">{</span>\n    id <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span>PrimaryKeyType<span class="token punctuation">)</span>\n    shopId <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span>NumberType<span class="token punctuation">)</span>\n    shop <span class="token operator">=</span> Product<span class="token punctuation">.</span><span class="token function">belongsTo</span><span class="token punctuation">(</span>Shop<span class="token punctuation">,</span> <span class="token string">&#39;shopId&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;id&#39;</span><span class="token punctuation">)</span>\n\n    <span class="token comment">// define a relation based on &#39;shop&#39; with additional where clause</span>\n    shopInHongKong <span class="token operator">=</span> Product<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">compute</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">typeof</span> Product<span class="token punctuation">,</span> ModelObjectRecord<span class="token operator">&lt;</span><span class="token keyword">typeof</span> Shop<span class="token operator">&gt;</span> <span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>\n        <span class="token punctuation">(</span>parent<span class="token punctuation">,</span> args<span class="token operator">?</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">any</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token comment">// the shop Scalar is transformed into another Scalar. </span>\n        <span class="token comment">// The original dataset (&#39;ds&#39;) is modified by adding where clause</span>\n        <span class="token keyword">return</span> parent<span class="token punctuation">.</span>$<span class="token punctuation">.</span><span class="token function">shop</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span> ds <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> ds<span class="token punctuation">.</span><span class="token function">andWhere</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n              location<span class="token operator">:</span> <span class="token string">&#39;Hong Kong&#39;</span>\n            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toScalar</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// find all products which belong to Shop with location &#39;Hong Kong&#39;</span>\n<span class="token keyword">let</span> products <span class="token operator">=</span> <span class="token keyword">await</span> Product<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token function-variable function">where</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>root<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> root<span class="token punctuation">.</span><span class="token function">shopInHongKong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div>',9),t={},e=(0,a(3744).Z)(t,[["render",function(n,s){return p}]])},3744:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,p]of s)a[n]=p;return a}}}]);