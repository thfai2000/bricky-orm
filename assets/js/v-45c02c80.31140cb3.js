"use strict";(self.webpackChunktaichi_orm=self.webpackChunktaichi_orm||[]).push([[808],{4677:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-45c02c80",path:"/guide/concepts/schema.html",title:"Schema",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"Datasource",slug:"datasource",children:[{level:3,title:"ValueSelector ($)",slug:"valueselector",children:[]}]}],filePathRelative:"guide/concepts/schema.md",git:{updatedTime:1639159614e3,contributors:[{name:"Eddie Tang",email:"thfai2000@gmail.com",commits:4}]}}},8586:(n,s,a)=>{a.r(s),a.d(s,{default:()=>k});var e=a(6252);const t=(0,e.uE)('<h1 id="schema" tabindex="-1"><a class="header-anchor" href="#schema" aria-hidden="true">#</a> Schema</h1><ul><li>It represents a dictionary of properties.</li><li><code>Dataset</code>, <code>ModelRepository</code> or <code>Model</code> can produce a <code>Schema</code>.</li></ul><p>Examples:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>context<span class="token punctuation">.</span><span class="token function">dataset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">schema</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\ncontext<span class="token punctuation">.</span>repos<span class="token punctuation">.</span>Model1<span class="token punctuation">.</span><span class="token function">schema</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./models/Model1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">schema</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="datasource" tabindex="-1"><a class="header-anchor" href="#datasource" aria-hidden="true">#</a> Datasource</h2><ul><li>It is produced from a <code>Schema</code> by giving a name (acts as table alias).</li><li>It refers to a database table or a temporary table.</li><li>It is used by the Query Builders&#39; <code>from</code>, <code>innerJoin</code>, <code>leftJoin</code> and <code>rightJoin</code> functions.</li></ul><p>Example: Below it makes a query with selecting fields from table <code>Model1</code> with alias <code>table_alias</code>.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> schema <span class="token operator">=</span> context<span class="token punctuation">.</span>repos<span class="token punctuation">.</span>Model1<span class="token punctuation">.</span><span class="token function">schema</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token keyword">let</span> queryBuilder <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">dataset</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>schema<span class="token punctuation">.</span><span class="token function">datasource</span><span class="token punctuation">(</span><span class="token string">&#39;table_alias&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span>\n        <span class="token string">&#39;table_alias.id&#39;</span><span class="token punctuation">,</span>\n        <span class="token string">&#39;table_alias.field1&#39;</span><span class="token punctuation">,</span>\n        <span class="token string">&#39;table_alias.field2&#39;</span>\n    <span class="token punctuation">)</span>\n</code></pre><div class="highlight-lines"><br><br><br><div class="highlight-line"> </div><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>There are many ways to create a datasource instance.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>Model1<span class="token punctuation">.</span><span class="token function">schema</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">datasource</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span>\n<span class="token comment">//OR a shortcut:</span>\nModel1<span class="token punctuation">.</span><span class="token function">datasource</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span>\n\nmodelRepository1<span class="token punctuation">.</span><span class="token function">schema</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">datasource</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span>\n<span class="token comment">//OR a shortcut:</span>\nmodelRepository1<span class="token punctuation">.</span><span class="token function">datasource</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span>\n\ndataset1<span class="token punctuation">.</span><span class="token function">schema</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">datasource</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span>\n<span class="token comment">//OR a shortcut:</span>\ndataset1<span class="token punctuation">.</span><span class="token function">datasource</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="valueselector" tabindex="-1"><a class="header-anchor" href="#valueselector" aria-hidden="true">#</a> ValueSelector (<code>$</code>)</h3><p>A datasource instance provides an object <code>$</code> having values of <code>Scalar</code> or <code>CompiledComputeFunction</code> which represents the properties of the Schema.</p>',12),p={class:"custom-container tip"},c=(0,e._)("p",{class:"custom-container-title"},"TIP",-1),o=(0,e._)("p",null,[(0,e._)("code",null,"Scalar"),(0,e.Uk)(" is a single SQL value that can be a field name or SQL functions.")],-1),l=(0,e.Uk)("Please see "),i=(0,e.Uk)("Scalar"),u=(0,e.Uk)(" for more details."),r=(0,e.uE)('<p>Examples:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">MyModel</span> <span class="token keyword">extends</span> <span class="token class-name">Model</span> <span class="token punctuation">{</span>\n  <span class="token comment">// Nullable Integer</span>\n  prop1 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span>NumberType<span class="token punctuation">)</span>\n  \n  prop2 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">compute</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token parameter">parent</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> parent<span class="token punctuation">.</span><span class="token function">minus</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> scalar1 <span class="token operator">=</span> Model1<span class="token punctuation">.</span><span class="token function">datasource</span><span class="token punctuation">(</span><span class="token string">&#39;table1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>$<span class="token punctuation">.</span>prop1\n\n<span class="token keyword">const</span> scalar2 <span class="token operator">=</span> Model1<span class="token punctuation">.</span><span class="token function">datasource</span><span class="token punctuation">(</span><span class="token string">&#39;table1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>$<span class="token punctuation">.</span><span class="token function">prop2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><details class="custom-container details"><p>If the key of <code>$</code> refers to a <code>FieldProperty</code>&#39;s name, the value will be a <code>Scalar</code>.</p><p>If it refers to a <code>ComputeProperty</code>&#39;s name, the value is a Function (<code>CompiledComputeFunction</code>) that returns a <code>Scalar</code>.</p></details><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>Please see <a href="./property">Property</a> for more explanation.</p></div>',4),d={},k=(0,a(3744).Z)(d,[["render",function(n,s){const a=(0,e.up)("RouterLink");return(0,e.wg)(),(0,e.iD)(e.HY,null,[t,(0,e._)("div",p,[c,o,(0,e._)("p",null,[l,(0,e.Wm)(a,{to:"/guide/concepts/query-builder.html#scalar"},{default:(0,e.w5)((()=>[i])),_:1}),u])]),r],64)}]])},3744:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,e]of s)a[n]=e;return a}}}]);