"use strict";(self.webpackChunktaichi_orm=self.webpackChunktaichi_orm||[]).push([[756],{1913:(t,e,l)=>{l.r(e),l.d(e,{data:()=>a});const a={key:"v-6da768ff",path:"/guide/concepts/property-type.html",title:"PropertyType",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"Usage",slug:"usage",children:[]}],filePathRelative:"guide/concepts/property-type.md",git:{updatedTime:1638891041e3,contributors:[{name:"Eddie Tang",email:"thfai2000@gmail.com",commits:3}]}}},6e3:(t,e,l)=>{l.r(e),l.d(e,{default:()=>s});const a=(0,l(6252).uE)('<h1 id="propertytype" tabindex="-1"><a class="header-anchor" href="#propertytype" aria-hidden="true">#</a> PropertyType</h1><p>There are various kinds of PropertyType that represent different SQL data-type</p><table><thead><tr><th style="text-align:left;">Class Name</th><th style="text-align:left;">Description</th><th style="text-align:left;">FieldProperty applicable?</th><th style="text-align:left;">ComputeProperty applicable?</th><th style="text-align:left;">Options</th></tr></thead><tbody><tr><td style="text-align:left;">PrimaryKeyType</td><td style="text-align:left;">Primary Key with Auto Increment</td><td style="text-align:left;">Yes</td><td style="text-align:left;">No</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">NumberType</td><td style="text-align:left;">Nullable Integer</td><td style="text-align:left;">Yes</td><td style="text-align:left;">Yes</td><td style="text-align:left;">{default?: number }</td></tr><tr><td style="text-align:left;">NumberNotNullType</td><td style="text-align:left;">Non-nullable Integer</td><td style="text-align:left;">Yes</td><td style="text-align:left;">Yes</td><td style="text-align:left;">{default?: number }</td></tr><tr><td style="text-align:left;">DecimalType</td><td style="text-align:left;">Nullable Decimal</td><td style="text-align:left;">Yes</td><td style="text-align:left;">Yes</td><td style="text-align:left;">{ default?: number, precision?: number, scale?: number }</td></tr><tr><td style="text-align:left;">DecimalNotNullType</td><td style="text-align:left;">Non-nullable Decimal</td><td style="text-align:left;">Yes</td><td style="text-align:left;">Yes</td><td style="text-align:left;">{ default?: number, precision?: number, scale?: number }</td></tr><tr><td style="text-align:left;">BooleanType</td><td style="text-align:left;">Nullable Boolean</td><td style="text-align:left;">Yes</td><td style="text-align:left;">Yes</td><td style="text-align:left;">{default?: boolean }</td></tr><tr><td style="text-align:left;">BooleanNotNullType</td><td style="text-align:left;">Non-nullable Boolean</td><td style="text-align:left;">Yes</td><td style="text-align:left;">Yes</td><td style="text-align:left;">{default?: boolean }</td></tr><tr><td style="text-align:left;">StringType</td><td style="text-align:left;">Nullable Varchar</td><td style="text-align:left;">Yes</td><td style="text-align:left;">Yes</td><td style="text-align:left;">{default?: string, length?: number }</td></tr><tr><td style="text-align:left;">StringNotNullType</td><td style="text-align:left;">Non-nullable Varchar</td><td style="text-align:left;">Yes</td><td style="text-align:left;">Yes</td><td style="text-align:left;">{default?: string, length?: number }</td></tr><tr><td style="text-align:left;">DateType</td><td style="text-align:left;">Nullable Date</td><td style="text-align:left;">Yes</td><td style="text-align:left;">Yes</td><td style="text-align:left;">{ default?: Date }</td></tr><tr><td style="text-align:left;">DateNotNullType</td><td style="text-align:left;">Non-nullable Date</td><td style="text-align:left;">Yes</td><td style="text-align:left;">Yes</td><td style="text-align:left;">{ default?: Date }</td></tr><tr><td style="text-align:left;">DateTimeType</td><td style="text-align:left;">Nullable Datetime</td><td style="text-align:left;">Yes</td><td style="text-align:left;">Yes</td><td style="text-align:left;">{default?: Date, precision?: number }</td></tr><tr><td style="text-align:left;">DateTimeNotNullType</td><td style="text-align:left;">Non-nullable Datetime</td><td style="text-align:left;">Yes</td><td style="text-align:left;">Yes</td><td style="text-align:left;">{default?: Date, precision?: number }</td></tr><tr><td style="text-align:left;">ObjectType</td><td style="text-align:left;">Nullable Object</td><td style="text-align:left;">No</td><td style="text-align:left;">Yes</td><td style="text-align:left;">n/a</td></tr><tr><td style="text-align:left;">ArrayType</td><td style="text-align:left;">Nullable Array of Object</td><td style="text-align:left;">No</td><td style="text-align:left;">Yes</td><td style="text-align:left;">n/a</td></tr></tbody></table><h2 id="usage" tabindex="-1"><a class="header-anchor" href="#usage" aria-hidden="true">#</a> Usage</h2><p>Define a data-type for a <code>FieldProperty</code></p><p>Example:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">MyModel</span> <span class="token keyword">extends</span> <span class="token class-name">Model</span> <span class="token punctuation">{</span>\n    <span class="token comment">//define a non-nullable varchar type data</span>\n    prop1 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span>StringNotNullType<span class="token punctuation">)</span>\n\n    <span class="token comment">//define a non-nullable varchar type data</span>\n    <span class="token comment">// with max length 50</span>\n    prop2 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringNotNullType</span><span class="token punctuation">(</span><span class="token punctuation">{</span>length<span class="token operator">:</span> <span class="token number">50</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>Define a data-type for a <code>Scalar</code></p><p>Example:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// make a SQL value with type NumberNotNullType</span>\n<span class="token keyword">const</span> scalar <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">scalar</span><span class="token punctuation">(</span><span class="token string">&#39;5 + 10 + ?&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">,</span> NumberNotNullType<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',10),n={},s=(0,l(3744).Z)(n,[["render",function(t,e){return a}]])},3744:(t,e)=>{e.Z=(t,e)=>{const l=t.__vccOpts||t;for(const[t,a]of e)l[t]=a;return l}}}]);