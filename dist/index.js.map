{
  "version": 3,
  "sources": ["../src/index.ts"],
  "sourcesContent": ["// import { Builder } from './Builder'\nimport knex from 'knex'\nimport { Entity } from './entity'\nimport * as fs from 'fs';\n\n// let knexObj: Knex<any, unknown[]> | null = null\n// const getGlobalKnex = () => {\n//     if(!knexObj){\n//         knexObj = knex({\n//         client: 'mysql2',\n//             // connection: {\n//             //     host : '127.0.0.1',\n//             //     user : 'example',\n//             //     password : 'example',\n//             //     database : 'example'\n//             // }\n//         });\n//     }\n//     return knexObj\n// }\n\ntype Config = {\n    modelsPath: string,\n    entityNameToTableName?: (params:string) => string | undefined,\n    tableNameToEntityName?: (params:string) => string| undefined,\n    propNameTofieldName?: (params:string) => string| undefined,\n    fieldNameToPropName?: (params:string) => string| undefined\n}\n\nlet config: Config = {\n    modelsPath: 'models/'\n}\n\nexport const configure = async function(newConfig: Config){\n    config = newConfig\n\n    let files = fs.readdirSync(config.modelsPath)\n    \n    await Promise.all(files.map( async(file) => {\n\n        if(file.endsWith('.js')){\n            let path = config.modelsPath + '/' + file\n            path = path.replace(/\\.js$/,'')\n            console.log('load model file:', path)\n            let entityClass = require(path)\n            entityClass.default.register()\n        }\n    }))\n}\n\nexport const Types = {\n    AutoIncrement: ['bigint','AutoIncrement'],\n    String: (length: number, nullable: boolean) => [`varchar(${length})`, nullable?'null':'not null'],\n    StringNull: ['varchar(255)', 'null'],\n    StringNotNull: ['varchar(255)', 'not null'],\n    Number: [],\n    Date: [],\n    arrayOf: function(entity: { new(): Entity }){\n        //TODO\n    }\n}\n\nexport const Select = function(...args: any[]){\n\n    let alias: string[] = args.map(s => /\\[\\[(.*)\\]\\]/g.exec(s)?.[1] || '' ).filter(s => s.length > 0)\n    \n    let info = alias.map(a => {\n        let parts = a.split('|')\n        return {\n            fullName: `[[${a}]]`,\n            tableName: parts[0],\n            aliasName: parts[1],\n            fieldName: parts[2]\n        }\n    })\n\n    let distinctNames: string[] = [...new Set(info.map(i => `${i.tableName} as ${i.aliasName}`))]\n    // let [firstName, ...otherNames] = distinctNames\n\n    let stmt = knex({client: 'mysql2'}).select(...args)\n    if(distinctNames.length === 1){\n        stmt = stmt.from(distinctNames[0])\n    }\n\n    // stmt = distinctNames.reduce((acc, name) => acc.from(name, {only:false}), stmt)\n    console.log(stmt.toSQL())\n    return stmt\n}\n\nSelect('[[SKU|t1|name]].name', '[[SKU|t1|abc]].abc')"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,kBAAiB;AAEjB,SAAoB;AA0BpB,IAAI,SAAiB;AAAA,EACjB,YAAY;AAAA;AAGT,MAAM,YAAY,SAAe,WAAkB;AAAA;AACtD,aAAS;AAET,QAAI,QAAQ,GAAG,YAAY,OAAO;AAElC,UAAM,QAAQ,IAAI,MAAM,IAAK,CAAM,SAAS;AAExC,UAAG,KAAK,SAAS,QAAO;AACpB,YAAI,OAAO,OAAO,aAAa,MAAM;AACrC,eAAO,KAAK,QAAQ,SAAQ;AAC5B,gBAAQ,IAAI,oBAAoB;AAChC,YAAI,cAAc,QAAQ;AAC1B,oBAAY,QAAQ;AAAA;AAAA;AAAA;AAAA;AAKzB,MAAM,QAAQ;AAAA,EACjB,eAAe,CAAC,UAAS;AAAA,EACzB,QAAQ,CAAC,QAAgB,aAAsB,CAAC,WAAW,WAAW,WAAS,SAAO;AAAA,EACtF,YAAY,CAAC,gBAAgB;AAAA,EAC7B,eAAe,CAAC,gBAAgB;AAAA,EAChC,QAAQ;AAAA,EACR,MAAM;AAAA,EACN,SAAS,SAAS,QAA0B;AAAA;AAAA;AAKzC,MAAM,SAAS,YAAY,MAAY;AAE1C,MAAI,QAAkB,KAAK,IAAI,OAAE;AAhErC;AAgEwC,kCAAgB,KAAK,OAArB,mBAA0B,OAAM;AAAA,KAAK,OAAO,OAAK,EAAE,SAAS;AAEhG,MAAI,OAAO,MAAM,IAAI,OAAK;AACtB,QAAI,QAAQ,EAAE,MAAM;AACpB,WAAO;AAAA,MACH,UAAU,KAAK;AAAA,MACf,WAAW,MAAM;AAAA,MACjB,WAAW,MAAM;AAAA,MACjB,WAAW,MAAM;AAAA;AAAA;AAIzB,MAAI,gBAA0B,CAAC,GAAG,IAAI,IAAI,KAAK,IAAI,OAAK,GAAG,EAAE,gBAAgB,EAAE;AAG/E,MAAI,OAAO,yBAAK,CAAC,QAAQ,WAAW,OAAO,GAAG;AAC9C,MAAG,cAAc,WAAW,GAAE;AAC1B,WAAO,KAAK,KAAK,cAAc;AAAA;AAInC,UAAQ,IAAI,KAAK;AACjB,SAAO;AAAA;AAGX,OAAO,wBAAwB;",
  "names": []
}
